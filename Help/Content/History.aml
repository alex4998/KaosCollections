<?xml version="1.0" encoding="utf-8"?>
<topic id="90402bce-1f31-45f8-b0ea-0a73408bd45a" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

    <section>
      <title>KwCollections version 2.1.0 (2012-03-06)</title>
      <content>
        <list class="bullet">
          <listItem>Adds support for range queries.</listItem>
          <listItem>Adds optimized implementation of <codeInline>Last()</codeInline>.</listItem>
        </list>
      </content>
    </section>

    <section>
      <title>KwCollections version 2.1.1 (2012-03-28)</title>
      <content>
        <list class="bullet">
          <listItem>Removes possible code coverage artifacts from <codeInline>.dll</codeInline> file.</listItem>
          <listItem>Initial release of documentation.</listItem>
        </list>
      </content>
    </section>

    <section>
      <title>KaosCollections version 3.0.0 (2017-10-01)</title>
      <content>
        <para>
          This release updates tooling to 2017.
          The new .NET Standard has been embraced for compatibility and future-proofing.
          Development now requires Visual Studio 2017 with the repository changed to Git.
          Binary now hosted at NuGet.org.
        </para>
        <list class="bullet">
          <listItem>Renames root namespace from <codeInline>Kw</codeInline> to <codeInline>Kaos</codeInline>.</listItem>
          <listItem>Changes binary to .NET Standard 1.0 multitargeted to .NET 4.5, 4.0, 3.5.</listItem>
          <listItem>
              Renames <codeInline>BtreeDictionary</codeInline> class to <codeInline>RankedDictionary</codeInline>
              with improved <codeInline>SortedDictionary</codeInline> emulation
              and enhanced with partial <codeInline>SortedList</codeInline> emulation.
          </listItem>
          <listItem>Adds <codeInline>RankedSet</codeInline> generic class which emulates <codeInline>SortedSet</codeInline> with indexing.</listItem>
          <listItem>Adds <codeInline>RankedBag</codeInline> generic class which provides a sorted and indexed multiset.</listItem>
          <listItem>Optimizes many operations for time and space.</listItem>
        </list>
      </content>
    </section>

    <section>
      <title>KaosCollections version 3.0.0.2 (2017-10-31)</title>
      <content>
        <para>This release updates documentation only.</para>
      </content>
    </section>

    <section>
      <title>KaosCollections version 3.1.0 (2017-11-11)</title>
      <content>
        <para>
          This release fixes a data corruption bug in <codeInline>RankedDictionary</codeInline> and enhances it and its subcollections.
        </para>
        <list class="bullet">
          <listItem>Fixes potential <codeInline>RankedDictionary</codeInline> mismatched key/value after remove operation.</listItem>
          <listItem>
            Enhances <codeInline>RankedDictionary</codeInline>:
            <list class="bullet">
              <listItem>
                Adds <codeInline>RemoveWhereElement</codeInline> method.
              </listItem>
            </list>
          </listItem>
          <listItem>Enhances <codeInline>RankedDictionary.KeyCollection</codeInline>, <codeInline>RankedDictionary.ValueCollection</codeInline>:</listItem>
            <list class="bullet">
              <listItem>Adds indexer property for array semantics.</listItem>
              <listItem>Adds <codeInline>ElementAt</codeInline>, <codeInline>ElementAtOrDefault</codeInline>, <codeInline>IndexOf</codeInline> methods.</listItem>
            </list>
          <listItem>Updates documentation.</listItem>
        </list>
      </content>
    </section>

    <section>
      <title>KaosCollections version 4.1.0 (2018-02-15)</title>
      <content>
        <list class="bullet">
          <listItem>
            Adds the <codeInline>RankedMap&lt;TKey,TValue&gt;</codeInline> class.
          </listItem>
          <listItem>
            Optimizes the <codeInline>RemoveWhere</codeInline> and <codeInline>RemoveWhereElement</codeInline> methods.
          </listItem>
          <listItem>
            Adds various LINQ-signatured methods as instance methods to improve performance.
          </listItem>
          <listItem>
            Adds <codeInline>Replace</codeInline> and various <codeInline>TryGet</codeInline> methods.
          </listItem>
        </list>
        <para>
          The new <codeInline>RankedMap</codeInline> generic class is similar to <codeInline>RankedDictionary</codeInline> but with duplicate keys allowed.
          Therefore, <codeInline>RankedMap</codeInline> is to <codeInline>RankedDictionary</codeInline> what <codeInline>RankedBag</codeInline> is to <codeInline>RankedSet</codeInline>.
          Like <codeInline>RankedBag</codeInline>, methods such as <codeInline>ElementAt</codeInline> and <codeInline>IndexOf</codeInline> are not implemented since keys are not distinct.
          Also like <codeInline>RankedBag</codeInline>, the methods <codeInline>GetDistinctCount</codeInline> and <codeInline>GetCount(key)</codeInline> are implemented.
          </para>
        <para>
          Previous versions of <codeInline>RemoveWhere</codeInline> degraded ungracefully when more than a few items were actually removed.
          In worst case if all items are removed for a large collection, the time spent is 40 times that if no items are removed.
          With this optimization, this penalty is reduced to 2 times that if no items are removed.
        </para>
        <para>
          Methods <codeInline>First</codeInline>, <codeInline>Last</codeInline>, and <codeInline>Contains</codeInline>
          and enumerators <codeInline>Distinct</codeInline> and <codeInline>Reverse</codeInline>
          have been added to additional classes as instance methods to improve performance over their LINQ counterparts.
        </para>
        <para>
          <codeInline>TryGet</codeInline> and <codeInline>Replace</codeInline> methods have been added to various classes.
          These methods combine what could be accomplished in multiple operations into a single operation
          in order to improve performance and reduce heap allocations.
        </para>
      </content>
    </section>


    <section>
      <title>KaosCollections version Next (2018-??-??)</title>
      <content>
        <para><legacyBold><legacyItalic>Summary</legacyItalic></legacyBold></para>
        <list class="bullet">
          <listItem>
            Adds optimized <codeInline>Skip</codeInline> and <codeInline>SkipWhile</codeInline> instance methods.
          </listItem>
          <listItem>
            Improves enumerator compatibility with Microsoft's Base Class Library.
            <list class="bullet">
              <listItem>
                All enumerator types have been converted from <codeInline>class</codeInline> to <codeInline>struct</codeInline>.
              </listItem>
              <listItem>
                Calls to the <codeInline>Current</codeInline> property will succeed following updates to the underlying class.
              </listItem>
            </list>
          </listItem>
        </list>
        <para><legacyBold><legacyItalic>Details</legacyItalic></legacyBold></para>
        <para><legacyBold>Adds optimized <codeInline>Skip</codeInline> and <codeInline>SkipWhile</codeInline> instance methods</legacyBold></para>
        <para>
          Microsoft's <codeInline>IEnumerable</codeInline> version of <codeInline>Skip</codeInline> performs an item-by-item fetching on the target structure.
          Such an inefficient scan can be optimized when the underlying structure has indexing capability.
          The instance method versions of <codeInline>Skip</codeInline> in this library execute in logarithmic time rather than scalar time.
          This optimization applies to any <codeInline>Skip</codeInline> call following any number of <codeInline>Skip</codeInline> or <codeInline>SkipWhile</codeInline> calls.
        </para>
        <para><legacyBold>All enumerator types have been converted from <codeInline>class</codeInline> to <codeInline>struct</codeInline></legacyBold></para>
        <para>
          While it is unlikely that <codeInline>class</codeInline> versus <codeInline>struct</codeInline> is relied on, this is a breaking change for such an edge case.
        </para>
        <para><legacyBold>Calls to the <codeInline>Current</codeInline> property will succeed following updates to the underlying class</legacyBold></para>
        <para>
          Microsoft's enumerators permit calls to the <codeInline>Current</codeInline> property after their underlying data structure has been modified.
          The returned value is whatever a call to <codeInline>Current</codeInline> would have returned before the update.
          KaosCollections now emulates this behavior.
        </para>
        <para>
          Previous versions of this library threw an exception here.
          While it is unlikely that a codebase would rely on an exception, this is a potential breaking change.
        </para>
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="bd99e66d-09ef-4adc-89eb-db2aaf89e8ad" />
    </relatedTopics>

  </developerConceptualDocument>
</topic>
