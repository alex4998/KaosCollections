<?xml version="1.0" encoding="utf-8"?>
<topic id="bd99e66d-09ef-4adc-89eb-db2aaf89e8ad" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        The KaosCollections library contains classes that complement the
        <codeEntityReference>N:System.Collections.Generic</codeEntityReference>
        classes. The primary classes are:
      </para>
      <list class="bullet">
        <listItem>
          <para>
            <codeEntityReference qualifyHint="false">T:Kaos.Collections.RankedDictionary`2</codeEntityReference>- an improved version of
            <codeEntityReference qualifyHint="false">T:System.Collections.Generic.SortedDictionary`2</codeEntityReference>
          </para>
        </listItem>
        <listItem>
          <para>
            <codeEntityReference qualifyHint="false">T:Kaos.Collections.RankedSet`1</codeEntityReference>
            - an improved version of
            <codeEntityReference qualifyHint="false">T:System.Collections.Generic.SortedSet`1</codeEntityReference>
          </para>
        </listItem>
      </list>
      <para>
        All provided classes closely emulate the API of the Microsoft's classes
        while extending capability and improving performance in many common scenarios.
        Both these classes add array-like support so that any element can be accessed by index
        or the index of an element may be determined from the element's key.
      </para>
      <para>
        The performance bump is due to the B+ tree variant used by KaosCollections.
        The structure used by SortedDictionary and SortedSet is a binary tree
        which greatly increases tree height and number of allocations compared to a B+ tree.
        Also in a B+ tree, data is grouped together in leaves which improves performance due to data locality.
      </para>
    </introduction>

    <section>
      <title>API differences between System.Collections.Generic and Kaos.Collections</title>
      <content>
        <para>
          The API of RankedDictionary and RankedSet closely adheres to Microsoft's related generic classes with a few exceptions:
        </para>
        <list class="bullet">
          <listItem>
            <para>Both classes add the <codeInline>GetByIndex(index)</codeInline> method which returns the element at the supplied index.</para>
          </listItem>
          <listItem>
            <para>Both classes add the <codeInline>IndexOf(key)</codeInline> method which returns the index of an element.</para>
          </listItem>
          <listItem>
            <para>
              Both classes adds the method <codeInline>GetFrom(key)</codeInline> that
              returns an enumerator for elements beginning at the supplied value.
            </para>
          </listItem>
          <listItem>
            <para>
              RankedDictionary adds the method TryGetValueAndIndex <codeInline>(key, out value, out index)</codeInline> that
              extends GetByIndex by also retrieving the key's associated value and index in one call.
            </para>
          </listItem>
          <listItem>
            <para>
              RankedDictionary adds the method <codeInline>GetBetween(from,to)</codeInline> that returns an enumerator over the specified range.
            </para>
          </listItem>
          <listItem>
            <para>
              The method
            <codeEntityReference qualifyHint="false">M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)</codeEntityReference>
              (which provides a virtual view to a range of a SortedSet) is replaced with the
                <codeInline>RankedSet.GetBetween(from,to)</codeInline>
              method which returns an enumerator.
            </para>
          </listItem>
          <listItem>
            <para>
              Neither class implements the
              <codeEntityReference>T:System.Runtime.Serialization.ISerializable</codeEntityReference>
              interface. Serialization may be added a future version.
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <section>
      <title>Data structure</title>
      <content>
        <para>
          The data structure used by RankedDictionary and RankedSet is a variant of an order statistic B+ tree.
          An order statistic tree brings two additional capabilities to a tree:
        </para>
        <list class="bullet">
          <listItem>
            <para>Select(<legacyItalic>i</legacyItalic>) — find the <legacyItalic>i</legacyItalic>'th smallest element in the tree (i.e. retrieve key by index).</para>
          </listItem>
          <listItem>
            <para>
              Rank(<legacyItalic>x</legacyItalic>) – find the rank of item <legacyItalic>x</legacyItalic> in the tree (i.e. retrieve index by key).
              The names of the classes in the KaosCollections library are derived from this operation.
            </para>
          </listItem>
        </list>
        <para>
          RankedDictionary and RankedSet store data in a B+ tree where all elements are stored in leaves at the same depth.
          The leaf level is a sorted doubly linked list with head and tail pointers.
          The first key of each leaf (except the leftmost) is copied to one branch for subdividing.
          Every node (branch or leaf) keeps keys sorted to enable binary searching.
          A tree with no elements is represented as an empty leaf.
        </para>
        <para>
          This structure differs from a typical B+ tree in these ways:
        </para>
        <list class="bullet">
          <listItem>
            <para>
              While the root may contain as few as 2 children, other rightmost branches may contain as few as one child.
              This variation optimizes the structure for bulk loading of presorted data
              and improves seek performance for data near the end of the collection - both common operations.
              All other branches, besides the root, maintain at least 50% capacity usage following every add and remove operation.
            </para>
          </listItem>
          <listItem>
            <para>
              The rightmost leaf may contain as few as one item.
              Again, this variation optimizes the structure for bulk loading of presorted data.
              All other leaves maintain at least 50% capacity usage following every add and remove operation.
            </para>
          </listItem>
          <listItem>
            <para>
              Every branch tracks the total number of items ('Weight') in leaves under it.
              For example, the weight of the root is the total number of elements in all leaves.
            </para>
          </listItem>
        </list>
      </content>
      </section>

    <section>
      <title>Distribution</title>
      <content>
        <para>
          This library is built as a .NET Standard project with multi-targeting.
          All targeted binaries are available in the distributed NuGet package.
          Current targets are:
        </para>
        <list class="bullet">
          <listItem>
            <para>
              .NETStandard 1.0.
              Use this for any .NET Core application or any .NET Framework application at or above .NET 4.5.
            </para>
          </listItem>
          <listItem>
            <para>
              Full .NET Framework 4.0.
              This target does not include IReadOnlyDictionary or IReadOnlyCollection implementation.
            </para>
          </listItem>
          <listItem>
            <para>
              Full .NET Framework 3.5.
              This target does not include IReadOnlyDictionary, IReadOnlyCollection, or ISet implementation.
            </para>
          </listItem>
        </list>
        <para>
          Documentation is currently distributed as a MS-Help 1 (.CHM) file.
          Also, installing as a Nuget package will provide intellisense and object browser documentation.
        </para>
      </content>
    </section>

    <section>
      <title>Build environment</title>
      <content>
        <para>
          This library requires Visual Studio 2017 Community Edition to build.
          There is an additional dependency on Sandcastle Help File Builder for building documentation.
          Test is performed by MSTest.
        </para>
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="90402bce-1f31-45f8-b0ea-0a73408bd45a" />
      <externalLink>
        <linkText>wikipedia.org/wiki/B+tree</linkText>
        <linkAlternateText>B+ tree</linkAlternateText>
        <linkUri>https://en.wikipedia.org/wiki/B%2Btree</linkUri>
      </externalLink>
      <externalLink>
        <linkText>wikipedia.org/wiki/Order_statistic_tree</linkText>
        <linkAlternateText>Order statistic tree</linkAlternateText>
        <linkUri>https://en.wikipedia.org/wiki/Order_statistic_tree</linkUri>
      </externalLink>
      <externalLink>
        <linkText>msdn.microsoft.com/en-us/library/system.collections.generic(v=vs.110).aspx</linkText>
        <linkAlternateText>System.Collections.Generic Namespace</linkAlternateText>
        <linkUri>https://msdn.microsoft.com/en-us/library/system.collections.generic(v=vs.110).aspx</linkUri>
      </externalLink>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
