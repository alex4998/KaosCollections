<?xml version="1.0" encoding="utf-8"?>
<topic id="bd99e66d-09ef-4adc-89eb-db2aaf89e8ad" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        The KaosCollections library contains classes that work alongside the
        <codeEntityReference>N:System.Collections.Generic</codeEntityReference>
        classes. The primary classes are:
      </para>
      <list class="bullet">
        <listItem>
          <para>
            <codeEntityReference qualifyHint="false">T:Kaos.Collections.RankedDictionary`2</codeEntityReference>- an improved version of
            <codeEntityReference qualifyHint="false">T:System.Collections.Generic.SortedDictionary`2</codeEntityReference>with additional
            <codeEntityReference qualifyHint="false">T:System.Collections.Generic.SortedList`2</codeEntityReference>enhancements.
          </para>
        </listItem>
        <listItem>
          <para>
            <codeEntityReference qualifyHint="false">T:Kaos.Collections.RankedSet`1</codeEntityReference>- an improved version of
            <codeEntityReference qualifyHint="false">T:System.Collections.Generic.SortedSet`1</codeEntityReference>.
          </para>
        </listItem>
      </list>
      <para>
        All provided classes closely emulate the API of the Microsoft's classes
        while extending capability and improving performance in many common scenarios.
        Both these classes add array-like functionality so that any element can be accessed by index
        or the index of an element may be determined from the element's key.
      </para>
      <para>
        The performance bump is due to the B+ tree variant used by KaosCollections.
        The structure used by <codeInline>SortedDictionary</codeInline> and <codeInline>SortedSet</codeInline> is a binary tree
        which greatly increases tree height and number of allocations compared to a B+ tree.
        Also in a B+ tree, data is grouped together in leaves which improves performance due to data locality.
      </para>
    </introduction>

    <section>
      <title>API differences between System.Collections.Generic and Kaos.Collections</title>
      <content>
        <para>
          The APIs of <codeInline>RankedDictionary</codeInline> and <codeInline>RankedSet</codeInline> closely adhere to Microsoft's related generic classes with a few exceptions:
        </para>
        <list class="bullet">
          <listItem>
            <para>
              <codeInline>RankedDictionary</codeInline> is enhanced with properties borrowed from <codeInline>SortedSet</codeInline>:
            </para>
            <list class="bullet">
              <listItem>
                <para>
                  Adds <codeInline>Min</codeInline> that returns the minimum key in the dictionary.
                </para>
              </listItem>
              <listItem>
                <para>
                  Adds <codeInline>Max</codeInline> that returns the maximum key in the dictionary.
                </para>
              </listItem>
              <listItem>
                <para>
                  Adds <codeInline>Reverse()</codeInline> that returns an enumerator of elements from maximum to minimum.
                </para>
              </listItem>
            </list>
          </listItem>

          <listItem>
            <para><codeInline>RankedDictionary</codeInline> is enhanced with methods borrowed from <codeInline>SortedList</codeInline>:</para>
            <list class="bullet">
              <listItem>
                <para>Adds <codeInline>IndexOfKey(key)</codeInline> that returns the position of the element with the supplied key.</para>
              </listItem>
              <listItem>
                <para>Adds <codeInline>IndexOfValue(value)</codeInline> that returns the position of the first element with the supplied value.</para>
              </listItem>
              <listItem>
                <para>Adds <codeInline>RemoveAt(index)</codeInline> that deletes the element at the supplied position.</para>
              </listItem>
            </list>
          </listItem>

          <listItem>
            <para><codeInline>RankedDictionary</codeInline> and <codeInline>RankedSet</codeInline> implement <codeInline>IEnumerable&lt;T&gt;</codeInline> methods to improve performance:</para>
            <list class="bullet">
              <listItem>
                <para>Implements <codeInline>ElementAt(index)</codeInline> that returns the element at the supplied position.</para>
              </listItem>
              <listItem>
                <para>Implements <codeInline>ElementAtOrDefault(index)</codeInline> that returns the element at the supplied position or the default if past the end of the collection.</para>
              </listItem>
              <listItem>
                <para>Implements <codeInline>Last()</codeInline> that returns the element at the last position.</para>
              </listItem>
            </list>
          </listItem>

          <listItem>
            <para><codeInline>RankedDictionary</codeInline> and <codeInline>RankedSet</codeInline> add enumerators for range query support:</para>
            <list class="bullet">
              <listItem>
                <para>
                  Adds <codeInline>GetBetween(lower,upper)</codeInline> for elements beginning and ending at the supplied values.
                </para>
              </listItem>
              <listItem>
                <para>
                  Adds <codeInline>GetFrom(lower)</codeInline> for elements beginning at the supplied value.
                </para>
              </listItem>
            </list>
          </listItem>

          <listItem>
            <para>
              <codeInline>RankedSet</codeInline> add methods from <codeInline>SortedList</codeInline> for indexing support:
            </para>
            <list class="bullet">
              <listItem>
                <para>
                  Adds the method <codeInline>IndexOf(item)</codeInline> that returns the position of the supplied item.
                </para>
              </listItem>
              <listItem>
                <para>
                  Adds the method <codeInline>RemoveAt(item)</codeInline> that deletes the item at the supplied position.
                </para>
              </listItem>
            </list>
          </listItem>

          <listItem>
            <para>
              <codeInline>RankedDictionary</codeInline> adds the method <codeInline>TryGetValueAndIndex(key,value,index)</codeInline> that
              retrieves the key's associated value and index in one call.
            </para>
          </listItem>
          <listItem>
            <para>
              The <codeInline>SortedSet</codeInline> method
              <codeEntityReference qualifyHint="false">M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)</codeEntityReference>
              (which provides a virtual view to a range of a <codeInline>SortedSet</codeInline>)
              is not implemented by <codeInline>RankedSet</codeInline>.
              Use the <codeInline>GetBetween(lower,upper)</codeInline> enumerator instead.
            </para>
          </listItem>
          <listItem>
            <para>
              There are a few error conditions that result in different exceptions being thrown.
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <section>
      <title>Data structure</title>
      <content>
        <para>
          The data structure used by <codeInline>RankedDictionary</codeInline> and <codeInline>RankedSet</codeInline> is an order statistic B+ tree variant.
          An order statistic tree adds two capabilities to a tree:
        </para>
        <list class="bullet">
          <listItem>
            <para>Select(<legacyItalic>i</legacyItalic>) — find the <legacyItalic>i</legacyItalic>'th smallest element in the tree (i.e. retrieve key by index).</para>
          </listItem>
          <listItem>
            <para>
              Rank(<legacyItalic>x</legacyItalic>) – find the rank of item <legacyItalic>x</legacyItalic> in the tree (i.e. retrieve index by key).
              The names of the classes in the KaosCollections library are derived from this operation.
            </para>
          </listItem>
        </list>
        <para>
          <codeInline>RankedDictionary</codeInline> and <codeInline>RankedSet</codeInline> store all elements in leaves at the same depth.
          The leaf level is a sorted doubly linked list with head and tail pointers.
          The first key of every leaf (except the leftmost) is copied to one branch for subdividing.
          A tree with no elements is represented as an empty leaf.
        </para>
        <para>
          This structure differs from a typical B+ tree in three ways:
        </para>
        <list class="bullet">
          <listItem>
            <para>
              While the root may contain as few as two children, other rightmost branches may contain as few as one child.
              This variation optimizes for time and space when bulk loading of presorted data
              and improves seek performance for data near the end of the collection - both common operations.
              All other branches maintain at least 50% capacity usage following every add and remove operation.
            </para>
          </listItem>
          <listItem>
            <para>
              The rightmost leaf may contain as few as one item.
              Again, this variation optimizes the structure for bulk loading of presorted data.
              All other leaves maintain at least 50% capacity usage following every add and remove operation.
            </para>
          </listItem>
          <listItem>
            <para>
              Every branch tracks the number of elements (weight) in all of its descendent leaves.
              For example, the weight of the root is the total number of elements in every leaf.
            </para>
          </listItem>
        </list>
      </content>
      </section>

    <section>
      <title>Distribution</title>
      <content>
        <para>
          This library is built as a .NET Standard project with multi-targeting.
          All targeted binaries are available in the distributed NuGet package.
          Current targets are:
        </para>
        <list class="bullet">
          <listItem>
            <para>
              .NETStandard 1.0.
              Use this for any .NET Core application or any .NET Framework application at or above .NET 4.5.
            </para>
          </listItem>
          <listItem>
            <para>
              Full .NET Framework 4.0.
              This target does not include <codeInline>IReadOnlyDictionary</codeInline> or <codeInline>IReadOnlyCollection</codeInline> implementation.
            </para>
          </listItem>
          <listItem>
            <para>
              Full .NET Framework 3.5.
              This target does not include <codeInline>IReadOnlyDictionary</codeInline>, <codeInline>IReadOnlyCollection</codeInline>, or <codeInline>ISet</codeInline> implementation.
            </para>
          </listItem>
        </list>
        <para>
          Documentation is currently distributed as a MS-Help 1 (.CHM) file.
          Also, installing as a NuGet package will provide IntelliSense and object browser documentation.
        </para>
      </content>
    </section>

    <section>
      <title>Build environment</title>
      <content>
        <para>
          Visual Studio 2017 Community Edition (or greater) is required to build the library.
          There is an additional dependency on Sandcastle Help File Builder for building documentation.
          Test is performed by MSTest.
        </para>
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="90402bce-1f31-45f8-b0ea-0a73408bd45a" />
      <externalLink>
        <linkText>wikipedia.org/wiki/B+tree</linkText>
        <linkAlternateText>B+ tree</linkAlternateText>
        <linkUri>https://en.wikipedia.org/wiki/B%2Btree</linkUri>
      </externalLink>
      <externalLink>
        <linkText>wikipedia.org/wiki/Order_statistic_tree</linkText>
        <linkAlternateText>Order statistic tree</linkAlternateText>
        <linkUri>https://en.wikipedia.org/wiki/Order_statistic_tree</linkUri>
      </externalLink>
      <externalLink>
        <linkText>msdn.microsoft.com/en-us/library/system.collections.generic(v=vs.110).aspx</linkText>
        <linkAlternateText>System.Collections.Generic Namespace</linkAlternateText>
        <linkUri>https://msdn.microsoft.com/en-us/library/system.collections.generic(v=vs.110).aspx</linkUri>
      </externalLink>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
